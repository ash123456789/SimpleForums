<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Event\Event;
use Cake\ORM\TableRegistry;
use Cake\Routing\Router;

/**
 * Nodes Controller
 */
class NodesController extends AppController
{

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Auth->allow([
            'index',
            'forum'
        ]);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $nodes = $this->Nodes->find('threaded')
            ->contain(['Threads' => function($q) {
                $q->select([
                    'node_id',
                    'total' => $q->func()->count('Threads.thread_id')
                ])
                ->group(['node_id'])
                ->first();

                return $q;
            }])
            ->order(['display_order' => 'asc']);

        $this->set(compact('nodes'));
    }

    public function add() // Temporary
    {
        $node = $this->Nodes->newEntity();

        if ($this->request->is('post')) {
            $node = $this->Nodes->patchEntity($node, $this->request->getData());
            if ($this->Nodes->save($node)) {
                $this->Flash->success(__('The node has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The node could not be saved. Please, try again.'));
        }

        $nodes = $this->Nodes->Nodes->find('list', ['limit' => 200]);
        $parentNodes = $this->Nodes->ParentNodes->find('list', ['limit' => 200]);

        $this->set(compact('node', 'nodes', 'parentNodes'));
        $this->set('_serialize', ['node']);
    }

    public function forum($id)
    {
        $node = $this->Nodes->find('threaded')->where(['node_id' => $id])->first();

        if (empty($node))
        {
            $this->Flash->error('That forum does not exist.');
            $this->redirect(['controller' => 'Nodes', 'action' => 'index']);
        }
        else {
            $this->loadModel('Threads');

            // Find children for current node
            $children = $this->Nodes->find('children', ['for' => $id]);

            $normalThreads = $this->paginate($this->Threads, [
                'conditions' => [
                    'stickied' => 0,
                    'node_id' => $id
                ],
                'order' => [
                    'created' => 'desc'
                ],
                'limit' => 25,
            ]);

            $stickiedThreads = $this->Threads->find()
                ->where(['node_id' => $id, 'stickied' => 1]);

            $this->set(compact('normalThreads', 'children', 'stickiedThreads'));
        }

        $this->set(compact('node'));
    }
}
